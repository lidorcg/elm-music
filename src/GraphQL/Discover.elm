{-
   This file was automatically generated by elm-graphql.
-}


module GraphQL.Discover exposing (searchMusic, SearchMusic)

import Task exposing (Task)
import Json.Decode exposing (..)
import Json.Encode exposing (encode)
import Http
import GraphQL exposing (apply, maybeEncode)
import Utils exposing ((:=))


endpointUrl : String
endpointUrl =
    "http://localhost:5000/discover/graphql"


type alias SearchMusic =
    { searchTracks :
        List
            { name : Maybe String
            , artists : Maybe String
            , duration : Maybe String
            , youtubeId : Maybe String
            }
    }


searchMusic : { artist : String, track : String } -> Task Http.Error SearchMusic
searchMusic params =
    let
        graphQLQuery =
            """query searchMusic($artist: String!, $track: String!) {
              searchMusic(artist: $artist, track: $track) {
                name
                artists
                duration
                youtubeId
              }
            }"""
    in
        let
            graphQLParams =
                Json.Encode.object
                    [ ( "artist", Json.Encode.string params.artist )
                    , ( "track", Json.Encode.string params.track )
                    ]
        in
            GraphQL.query "GET" endpointUrl graphQLQuery "searchMusic" graphQLParams searchMusicDecoder


searchMusicDecoder : Decoder SearchMusic
searchMusicDecoder =
    map SearchMusic
        ("searchMusic"
            := (list
                    (apply (apply (apply (map (\name artists duration youtubeId -> { name = name, artists = artists, duration = duration, youtubeId = youtubeId }) (maybe ("name" := string))) (maybe ("artists" := string))) (maybe ("duration" := string))) (maybe ("youtubeId" := string)))
               )
        )
