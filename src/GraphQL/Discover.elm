{-
   This file was automatically generated by elm-graphql.
-}


module GraphQL.Discover exposing (search, Search)

import Task exposing (Task)
import Json.Decode exposing (..)
import Json.Encode exposing (encode)
import Http
import GraphQL exposing (apply, maybeEncode)
import Utils exposing ((:=))


endpointUrl : String
endpointUrl =
    "http://localhost:5000/discover/graphql"


type alias Search =
    { searchTracks :
        List
            { name : Maybe String
            , artists : Maybe String
            , duration : Maybe String
            , youtubeId : Maybe String
            }
    }


search : { artist : String, track : String } -> Task Http.Error Search
search params =
    case params.track of
        "" ->
            searchTrackByArtist params.artist

        _ ->
            searchTrackByName params


searchTrackByName : { artist : String, track : String } -> Task Http.Error Search
searchTrackByName params =
    let
        graphQLQuery =
            """query searchTracksByName($artist: String!, $track: String!) {
                searchTracksByNameLastfm(artistName: $artist, trackName: $track) {
                  name
                  artists
                  duration
                  youtubeId
                }
              }"""
    in
        let
            graphQLParams =
                Json.Encode.object
                    [ ( "artist", Json.Encode.string params.artist )
                    , ( "track", Json.Encode.string params.track )
                    ]
        in
            GraphQL.query "GET" endpointUrl graphQLQuery "searchTracksByName" graphQLParams searchTrackByNameDecoder


searchTrackByArtist : String -> Task Http.Error Search
searchTrackByArtist artist =
    let
        graphQLQuery =
            """query searchTracksByArtist($artist: String!) {
                searchTracksByArtistNameLastfm(artistName: $artist) {
                  name
                  artists
                  duration
                  youtubeId
                }
              }"""
    in
        let
            graphQLParams =
                Json.Encode.object
                    [ ( "artist", Json.Encode.string artist )
                    ]
        in
            GraphQL.query "GET" endpointUrl graphQLQuery "searchTracksByArtist" graphQLParams searchTrackByArtistDecoder


searchTrackByNameDecoder : Decoder Search
searchTrackByNameDecoder =
    map Search
        ("searchTracksByNameLastfm"
            := (list
                    (apply (apply (apply (map (\name artists duration youtubeId -> { name = name, artists = artists, duration = duration, youtubeId = youtubeId }) (maybe ("name" := string))) (maybe ("artists" := string))) (maybe ("duration" := string))) (maybe ("youtubeId" := string)))
               )
        )

searchTrackByArtistDecoder : Decoder Search
searchTrackByArtistDecoder =
    map Search
        ("searchTracksByArtistNameLastfm"
            := (list
                    (apply (apply (apply (map (\name artists duration youtubeId -> { name = name, artists = artists, duration = duration, youtubeId = youtubeId }) (maybe ("name" := string))) (maybe ("artists" := string))) (maybe ("duration" := string))) (maybe ("youtubeId" := string)))
               )
        )
