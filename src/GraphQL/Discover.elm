{-
   This file was automatically generated by elm-graphql.
-}


module GraphQL.Discover exposing (search, Search)

import Task exposing (Task)
import Json.Decode exposing (..)
import Json.Encode exposing (encode)
import Http
import GraphQL exposing (apply, maybeEncode)


endpointUrl : String
endpointUrl =
    "http://localhost:5000/discover/graphql"


type alias Search =
    { searchTracks :
        List
            { name : Maybe String
            , artists : Maybe String
            , duration : Maybe String
            , youtubeId : Maybe String
            }
    }


search :
    { query : String
    }
    -> Task Http.Error Search
search params =
    let
        graphQLQuery =
            """query search($query: String!) { searchTracks(query: $query) { name artists duration youtubeId } }"""
    in
        let
            graphQLParams =
                Json.Encode.object
                    [ ( "query", Json.Encode.string params.query )
                    ]
        in
            GraphQL.query "GET" endpointUrl graphQLQuery "search" graphQLParams searchDecoder


searchDecoder : Decoder Search
searchDecoder =
    map Search
        ("searchTracks"
            := (list
                    (map (\name artists duration youtubeId -> { name = name, artists = artists, duration = duration, youtubeId = youtubeId }) (maybe ("name" := string))
                        `apply` (maybe ("artists" := string))
                        `apply` (maybe ("duration" := string))
                        `apply` (maybe ("youtubeId" := string))
                    )
               )
        )
