{-
    This file is automatically generated by elm-graphql. Do not modify!
-}
module GraphQL.Playlists exposing (playlists, PlaylistsResult, createPlaylist, CreatePlaylistResult)

import Task exposing (Task)
import Json.Decode exposing (..)
import Json.Encode exposing (encode)
import Http
import GraphQL exposing (apply, maybeEncode, ID)

endpointUrl : String
endpointUrl =
    "http://localhost:5000/playlists/graphql"


type alias PlaylistsResult 
    = { playlists : (List     { id : String
    , name : (Maybe String)
    , tracks : (List         { id : String
        , name : (Maybe String)
        , artists : (Maybe String)
        , duration : (Maybe String)
        , youtubeId : (Maybe String)
        })
    })
}


playlists : Task Http.Error PlaylistsResult
playlists =
    let graphQLQuery = """query playlists { playlists { id name tracks { id name artists duration youtubeId } } }""" in
    let graphQLParams =
            Json.Encode.object
                [ 
                ]
    in
    GraphQL.query endpointUrl graphQLQuery "playlists" (encode 0 graphQLParams) playlistsResult


playlistsResult : Decoder PlaylistsResult
playlistsResult =
    map PlaylistsResult ("playlists" :=
        (list (map (\id name tracks -> { id = id, name = name, tracks = tracks }) ("id" := string)
        `apply` (maybe ("name" := string))
        `apply` ("tracks" :=
        (list (map (\id name artists duration youtubeId -> { id = id, name = name, artists = artists, duration = duration, youtubeId = youtubeId }) ("id" := string)
        `apply` (maybe ("name" := string))
        `apply` (maybe ("artists" := string))
        `apply` (maybe ("duration" := string))
        `apply` (maybe ("youtubeId" := string))))))))


type alias CreatePlaylistResult 
    = { createPlaylist :     { ok : (Maybe Bool)
    , playlists : (List         { id : String
        , name : (Maybe String)
        , tracks : (List             { id : String
            , name : (Maybe String)
            , artists : (Maybe String)
            , duration : (Maybe String)
            , youtubeId : (Maybe String)
            })
        })
    }
}


createPlaylist :     { name : String
    } -> Task Http.Error CreatePlaylistResult
createPlaylist params =
    let graphQLQuery = """mutation createPlaylist($name: String!) { createPlaylist(name: $name) { ok playlists { id name tracks { id name artists duration youtubeId } } } }""" in
    let graphQLParams =
            Json.Encode.object
                [ ("name", Json.Encode.string params.name)
                ]
    in
    GraphQL.mutation endpointUrl graphQLQuery "createPlaylist" (encode 0 graphQLParams) createPlaylistResult


createPlaylistResult : Decoder CreatePlaylistResult
createPlaylistResult =
    map CreatePlaylistResult ("createPlaylist" :=
        (map (\ok playlists -> { ok = ok, playlists = playlists }) (maybe ("ok" := bool))
        `apply` ("playlists" :=
        (list (map (\id name tracks -> { id = id, name = name, tracks = tracks }) ("id" := string)
        `apply` (maybe ("name" := string))
        `apply` ("tracks" :=
        (list (map (\id name artists duration youtubeId -> { id = id, name = name, artists = artists, duration = duration, youtubeId = youtubeId }) ("id" := string)
        `apply` (maybe ("name" := string))
        `apply` (maybe ("artists" := string))
        `apply` (maybe ("duration" := string))
        `apply` (maybe ("youtubeId" := string))))))))))
