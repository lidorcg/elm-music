{-
   This file was automatically generated by elm-graphql.
-}


module GraphQL.Playlists exposing (playlists, Playlists, createPlaylist, CreatePlaylist, renamePlaylist, RenamePlaylist, deletePlaylist, DeletePlaylist, addTrackToPlaylist, AddTrackToPlaylist, removeTrack, RemoveTrack)

import Task exposing (Task)
import Json.Decode exposing (..)
import Json.Encode exposing (encode)
import Http
import GraphQL exposing (apply, maybeEncode)
import Utils exposing ((:=))


endpointUrl : String
endpointUrl =
    "http://localhost:5000/playlists/graphql"


type alias Playlists =
    { playlists :
        List
            { id : String
            , name : Maybe String
            , tracks :
                List
                    { id : String
                    , name : Maybe String
                    , artists : Maybe String
                    , duration : Maybe String
                    , youtubeId : Maybe String
                    }
            }
    }


playlists : Task Http.Error Playlists
playlists =
    let
        graphQLQuery =
            """query playlists { playlists { id name tracks { id name artists duration youtubeId } } }"""
    in
        let
            graphQLParams =
                Json.Encode.object
                    []
        in
            GraphQL.query "GET" endpointUrl graphQLQuery "playlists" graphQLParams playlistsDecoder


playlistsDecoder : Decoder Playlists
playlistsDecoder =
    map Playlists
        ("playlists"
            := (list
                    (apply (apply (map (\id name tracks -> { id = id, name = name, tracks = tracks }) ("id" := string)) (maybe ("name" := string)))
                        ("tracks"
                            := (list
                                    (apply (apply (apply (apply (map (\id name artists duration youtubeId -> { id = id, name = name, artists = artists, duration = duration, youtubeId = youtubeId }) ("id" := string)) (maybe ("name" := string))) (maybe ("artists" := string))) (maybe ("duration" := string))) (maybe ("youtubeId" := string)))
                               )
                        )
                    )
               )
        )


type alias CreatePlaylist =
    { createPlaylist :
        { ok : Maybe Bool
        , playlists :
            List
                { id : String
                , name : Maybe String
                , tracks :
                    List
                        { id : String
                        , name : Maybe String
                        , artists : Maybe String
                        , duration : Maybe String
                        , youtubeId : Maybe String
                        }
                }
        }
    }


createPlaylist :
    { name : String
    }
    -> Task Http.Error CreatePlaylist
createPlaylist params =
    let
        graphQLQuery =
            """mutation createPlaylist($name: String!) { createPlaylist(name: $name) { ok playlists { id name tracks { id name artists duration youtubeId } } } }"""
    in
        let
            graphQLParams =
                Json.Encode.object
                    [ ( "name", Json.Encode.string params.name )
                    ]
        in
            GraphQL.mutation endpointUrl graphQLQuery "createPlaylist" graphQLParams createPlaylistDecoder


createPlaylistDecoder : Decoder CreatePlaylist
createPlaylistDecoder =
    map CreatePlaylist
        ("createPlaylist"
            := (apply (map (\ok playlists -> { ok = ok, playlists = playlists }) (maybe ("ok" := bool)))
                    ("playlists"
                        := (list
                                (apply (apply (map (\id name tracks -> { id = id, name = name, tracks = tracks }) ("id" := string)) (maybe ("name" := string)))
                                    ("tracks"
                                        := (list
                                                (apply (apply (apply (apply (map (\id name artists duration youtubeId -> { id = id, name = name, artists = artists, duration = duration, youtubeId = youtubeId }) ("id" := string)) (maybe ("name" := string))) (maybe ("artists" := string))) (maybe ("duration" := string))) (maybe ("youtubeId" := string)))
                                           )
                                    )
                                )
                           )
                    )
               )
        )


type alias RenamePlaylist =
    { renamePlaylist :
        { ok : Maybe Bool
        , playlists :
            List
                { id : String
                , name : Maybe String
                , tracks :
                    List
                        { id : String
                        , name : Maybe String
                        , artists : Maybe String
                        , duration : Maybe String
                        , youtubeId : Maybe String
                        }
                }
        }
    }


renamePlaylist :
    { id : String
    , name : String
    }
    -> Task Http.Error RenamePlaylist
renamePlaylist params =
    let
        graphQLQuery =
            """mutation renamePlaylist($id: String!, $name: String!) { renamePlaylist(playlistId: $id, newName: $name) { ok playlists { id name tracks { id name artists duration youtubeId } } } }"""
    in
        let
            graphQLParams =
                Json.Encode.object
                    [ ( "id", Json.Encode.string params.id )
                    , ( "name", Json.Encode.string params.name )
                    ]
        in
            GraphQL.mutation endpointUrl graphQLQuery "renamePlaylist" graphQLParams renamePlaylistDecoder


renamePlaylistDecoder : Decoder RenamePlaylist
renamePlaylistDecoder =
    map RenamePlaylist
        ("renamePlaylist"
            := (apply (map (\ok playlists -> { ok = ok, playlists = playlists }) (maybe ("ok" := bool)))
                    ("playlists"
                        := (list
                                (apply (apply (map (\id name tracks -> { id = id, name = name, tracks = tracks }) ("id" := string)) (maybe ("name" := string)))
                                    ("tracks"
                                        := (list
                                                (apply (apply (apply (apply (map (\id name artists duration youtubeId -> { id = id, name = name, artists = artists, duration = duration, youtubeId = youtubeId }) ("id" := string)) (maybe ("name" := string))) (maybe ("artists" := string))) (maybe ("duration" := string))) (maybe ("youtubeId" := string)))
                                           )
                                    )
                                )
                           )
                    )
               )
        )


type alias DeletePlaylist =
    { deletePlaylist :
        { ok : Maybe Bool
        , playlists :
            List
                { id : String
                , name : Maybe String
                , tracks :
                    List
                        { id : String
                        , name : Maybe String
                        , artists : Maybe String
                        , duration : Maybe String
                        , youtubeId : Maybe String
                        }
                }
        }
    }


deletePlaylist :
    { id : String
    }
    -> Task Http.Error DeletePlaylist
deletePlaylist params =
    let
        graphQLQuery =
            """mutation deletePlaylist($id: String!) { deletePlaylist(playlistId: $id) { ok playlists { id name tracks { id name artists duration youtubeId } } } }"""
    in
        let
            graphQLParams =
                Json.Encode.object
                    [ ( "id", Json.Encode.string params.id )
                    ]
        in
            GraphQL.mutation endpointUrl graphQLQuery "deletePlaylist" graphQLParams deletePlaylistDecoder


deletePlaylistDecoder : Decoder DeletePlaylist
deletePlaylistDecoder =
    map DeletePlaylist
        ("deletePlaylist"
            := (apply (map (\ok playlists -> { ok = ok, playlists = playlists }) (maybe ("ok" := bool)))
                    ("playlists"
                        := (list
                                (apply (apply (map (\id name tracks -> { id = id, name = name, tracks = tracks }) ("id" := string)) (maybe ("name" := string)))
                                    ("tracks"
                                        := (list
                                                (apply (apply (apply (apply (map (\id name artists duration youtubeId -> { id = id, name = name, artists = artists, duration = duration, youtubeId = youtubeId }) ("id" := string)) (maybe ("name" := string))) (maybe ("artists" := string))) (maybe ("duration" := string))) (maybe ("youtubeId" := string)))
                                           )
                                    )
                                )
                           )
                    )
               )
        )


type alias AddTrackToPlaylist =
    { addTrack :
        { ok : Maybe Bool
        , playlists :
            List
                { id : String
                , name : Maybe String
                , tracks :
                    List
                        { id : String
                        , name : Maybe String
                        , artists : Maybe String
                        , duration : Maybe String
                        , youtubeId : Maybe String
                        }
                }
        }
    }


addTrackToPlaylist :
    { track :
        { name : String
        , duration : String
        , artists : String
        , youtubeId : Maybe String
        }
    , playlistId : String
    }
    -> Task Http.Error AddTrackToPlaylist
addTrackToPlaylist params =
    let
        graphQLQuery =
            """mutation addTrackToPlaylist($track: TrackInput!, $playlistId: String!) { addTrack(track: $track, playlistId: $playlistId) { ok playlists { id name tracks { id name artists duration youtubeId } } } }"""
    in
        let
            graphQLParams =
                Json.Encode.object
                    [ ( "track", (Json.Encode.object [ ( "name", Json.Encode.string params.track.name ), ( "duration", Json.Encode.string params.track.duration ), ( "artists", Json.Encode.string params.track.artists ), ( "youtubeId", (maybeEncode Json.Encode.string params.track.youtubeId) ) ]) )
                    , ( "playlistId", Json.Encode.string params.playlistId )
                    ]
        in
            GraphQL.mutation endpointUrl graphQLQuery "addTrackToPlaylist" graphQLParams addTrackToPlaylistDecoder


addTrackToPlaylistDecoder : Decoder AddTrackToPlaylist
addTrackToPlaylistDecoder =
    map AddTrackToPlaylist
        ("addTrack"
            := (apply (map (\ok playlists -> { ok = ok, playlists = playlists }) (maybe ("ok" := bool)))
                    ("playlists"
                        := (list
                                (apply (apply (map (\id name tracks -> { id = id, name = name, tracks = tracks }) ("id" := string)) (maybe ("name" := string)))
                                    ("tracks"
                                        := (list
                                                (apply (apply (apply (apply (map (\id name artists duration youtubeId -> { id = id, name = name, artists = artists, duration = duration, youtubeId = youtubeId }) ("id" := string)) (maybe ("name" := string))) (maybe ("artists" := string))) (maybe ("duration" := string))) (maybe ("youtubeId" := string)))
                                           )
                                    )
                                )
                           )
                    )
               )
        )


type alias RemoveTrack =
    { removeTrack :
        { ok : Maybe Bool
        , playlists :
            List
                { id : String
                , name : Maybe String
                , tracks :
                    List
                        { id : String
                        , name : Maybe String
                        , artists : Maybe String
                        , duration : Maybe String
                        , youtubeId : Maybe String
                        }
                }
        }
    }


removeTrack :
    { trackId : String
    }
    -> Task Http.Error RemoveTrack
removeTrack params =
    let
        graphQLQuery =
            """mutation removeTrack($trackId: String!) { removeTrack(trackId: $trackId) { ok playlists { id name tracks { id name artists duration youtubeId } } } }"""
    in
        let
            graphQLParams =
                Json.Encode.object
                    [ ( "trackId", Json.Encode.string params.trackId )
                    ]
        in
            GraphQL.mutation endpointUrl graphQLQuery "removeTrack" graphQLParams removeTrackDecoder


removeTrackDecoder : Decoder RemoveTrack
removeTrackDecoder =
    map RemoveTrack
        ("removeTrack"
            := (apply (map (\ok playlists -> { ok = ok, playlists = playlists }) (maybe ("ok" := bool)))
                    ("playlists"
                        := (list
                                (apply (apply (map (\id name tracks -> { id = id, name = name, tracks = tracks }) ("id" := string)) (maybe ("name" := string)))
                                    ("tracks"
                                        := (list
                                                (apply (apply (apply (apply (map (\id name artists duration youtubeId -> { id = id, name = name, artists = artists, duration = duration, youtubeId = youtubeId }) ("id" := string)) (maybe ("name" := string))) (maybe ("artists" := string))) (maybe ("duration" := string))) (maybe ("youtubeId" := string)))
                                           )
                                    )
                                )
                           )
                    )
               )
        )
