{-
    This file is automatically generated by elm-graphql. Do not modify!
-}
module GraphQL.Music exposing (search, SearchResult, playlists, PlaylistsResult)

import Task exposing (Task)
import Json.Decode exposing (..)
import Json.Encode exposing (encode)
import Http
import GraphQL exposing (apply, maybeEncode, ID)

endpointUrl : String
endpointUrl =
    "http://localhost:5000/graphql"


type alias SearchResult 
    = { searchTracks : (List     { name : (Maybe String)
    , artists : (Maybe String)
    , duration : (Maybe String)
    , youtubeId : (Maybe String)
    })
}


search :     { query : String
    } -> Task Http.Error SearchResult
search params =
    let graphQLQuery = """query search($query: String!) { searchTracks(query: $query) { name artists duration youtubeId } }""" in
    let graphQLParams =
            Json.Encode.object
                [ ("query", Json.Encode.string params.query)
                ]
    in
    GraphQL.query endpointUrl graphQLQuery "search" (encode 0 graphQLParams) searchResult


searchResult : Decoder SearchResult
searchResult =
    map SearchResult ("searchTracks" :=
        (list (map (\name artists duration youtubeId -> { name = name, artists = artists, duration = duration, youtubeId = youtubeId }) (maybe ("name" := string))
        `apply` (maybe ("artists" := string))
        `apply` (maybe ("duration" := string))
        `apply` (maybe ("youtubeId" := string)))))


type alias PlaylistsResult 
    = { playlists : (List     { id : String
    , name : (Maybe String)
    , tracks : (List         { name : (Maybe String)
        , artists : (Maybe String)
        , duration : (Maybe String)
        , youtubeId : (Maybe String)
        })
    })
}


playlists : Task Http.Error PlaylistsResult
playlists =
    let graphQLQuery = """query playlists { playlists { id name tracks { name artists duration youtubeId } } }""" in
    let graphQLParams =
            Json.Encode.object
                [ 
                ]
    in
    GraphQL.query endpointUrl graphQLQuery "playlists" (encode 0 graphQLParams) playlistsResult


playlistsResult : Decoder PlaylistsResult
playlistsResult =
    map PlaylistsResult ("playlists" :=
        (list (map (\id name tracks -> { id = id, name = name, tracks = tracks }) ("id" := string)
        `apply` (maybe ("name" := string))
        `apply` ("tracks" :=
        (list (map (\name artists duration youtubeId -> { name = name, artists = artists, duration = duration, youtubeId = youtubeId }) (maybe ("name" := string))
        `apply` (maybe ("artists" := string))
        `apply` (maybe ("duration" := string))
        `apply` (maybe ("youtubeId" := string))))))))
