{-
   This file is automatically generated by elm-graphql. Do not modify!
-}


module GraphQL.Music exposing (searchTracks, SearchTracksResult)

import Task exposing (Task)
import Json.Decode exposing (..)
import Json.Encode exposing (encode)
import Http
import GraphQL exposing (apply, maybeEncode, ID)


endpointUrl : String
endpointUrl =
    "http://localhost:5000/graphql"


type alias SearchTracksResult =
    { searchTracks :
        List
            { name : Maybe String
            , youtubeId : Maybe String
            , artists :
                List
                    { name : Maybe String
                    }
            }
    }


searchTracks :
    { query : String
    }
    -> Task Http.Error SearchTracksResult
searchTracks params =
    let
        graphQLQuery =
            """query searchTracks($query: String!) { searchTracks(query: $query) { name youtubeId artists { name } } }"""
    in
        let
            graphQLParams =
                Json.Encode.object
                    [ ( "query", Json.Encode.string params.query )
                    ]
        in
            GraphQL.query endpointUrl graphQLQuery "searchTracks" (encode 0 graphQLParams) searchTracksResult


searchTracksResult : Decoder SearchTracksResult
searchTracksResult =
    map SearchTracksResult
        ("searchTracks"
            := (list
                    (map (\name youtubeId artists -> { name = name, youtubeId = youtubeId, artists = artists }) (maybe ("name" := string))
                        `apply` (maybe ("youtubeId" := string))
                        `apply`
                            ("artists"
                                := (list (map (\name -> { name = name }) (maybe ("name" := string))))
                            )
                    )
               )
        )
